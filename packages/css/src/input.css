.ds-input {
  --dsc-input-background--checked: var(--dsc-input-border-color--checked);
  --dsc-input-background--invalid: var(--dsc-input-border-color--invalid);
  --dsc-input-background--readonly: var(--ds-color-neutral-background-subtle);
  --dsc-input-background: var(--ds-color-neutral-background-default);
  --dsc-input-border-color--checked: var(--ds-color-base-default);
  --dsc-input-border-color--invalid: var(--ds-color-danger-border-strong);
  --dsc-input-border-color--readonly: var(--ds-color-neutral-border-subtle);
  --dsc-input-border-color: var(--ds-color-neutral-border-default);
  --dsc-input-border-width--toggle: max(1px, calc(var(--ds-size-1) / 2)); /* Allow border-width to grow with font-size */
  --dsc-input-border-width: 1px;
  --dsc-input-color--checked: var(--ds-color-contrast-default);
  --dsc-input-color--invalid: var(--ds-color-danger-contrast-default);
  --dsc-input-color--readonly: var(--ds-color-neutral-text-subtle);
  --dsc-input-color: var(--ds-color-neutral-text-default);
  --dsc-input-padding: var(--ds-size-2) var(--ds-size-3);
  --dsc-input-size--toggle: var(--ds-size-6);
  --dsc-input-size: var(--ds-size-12);
  --dsc-input-stroke: 0.055em;

  /* Checkmark with antialiasing is achieved by percentages 48% / 50% / 52% */
  --diagonal-1: transparent calc(48% - var(--dsc-input-stroke));
  --diagonal-2: currentcolor calc(50% - var(--dsc-input-stroke));
  --diagonal-3: currentcolor calc(50% + var(--dsc-input-stroke));
  --diagonal-4: transparent calc(52% + var(--dsc-input-stroke));
  --check-left: 10% 73% / 35% 35% no-repeat content-box linear-gradient(45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4));
  --check-right: 90% 50% / 65% 65% no-repeat content-box linear-gradient(-45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4));

  appearance: none;
  background: var(--dsc-input-background);
  border-radius: var(--ds-border-radius-md);
  border: var(--dsc-input-border-width) solid var(--dsc-input-border-color); /* Inherit from .ds-input-addons if present */
  box-shadow: var(--dsc-input-box-shadow);
  box-sizing: border-box;
  color: var(--dsc-input-color);
  font-family: inherit;
  height: var(--dsc-input-size);
  line-height: inherit;
  margin: 0; /* Reset native margin on checkbox and radio */
  max-width: 100%; /* Ensure input does not grow outside bounds even with a high value in size="" or cols="" */
  min-width: 0; /* Allow shrinking in flex container, see https://ishadeed.com/article/min-max-css/#setting-min-width-to-zero-with-flexbox */
  padding: var(--dsc-input-padding);
  position: relative; /* Ensure foucs outline renders on top */

  @composes ds-focus from './base.css';

  @media (forced-colors: active) {
    --dsc-input-border-color: ButtonText;
    --dsc-input-background: Canvas;
    --diagonal-1: transparent calc(48% - var(--dsc-input-stroke));
    --diagonal-2: Canvas calc(50% - var(--dsc-input-stroke));
    --diagonal-3: Canvas calc(50% + var(--dsc-input-stroke));
    --diagonal-4: transparent calc(52% + var(--dsc-input-stroke));
    --diagonal-1: transparent calc(48% - var(--dsc-input-stroke));
    --diagonal-2: Canvas calc(50% - var(--dsc-input-stroke));
    --diagonal-3: Canvas calc(50% + var(--dsc-input-stroke));
    --diagonal-4: transparent calc(52% + var(--dsc-input-stroke));
    --check-left: 10% 73% / 35% 35% no-repeat content-box linear-gradient(45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4));
    --check-right: 90% 50% / 65% 65% no-repeat content-box linear-gradient(-45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4));

    &:disabled,
    &[aria-disabled='true'],
    &[readonly] {
      --dsc-input-border-color: GrayText;
    }
  }

  /* Round border-width up to nearest 1px if supported */
  @supports (width: round(down, .1em, 1px)) {
    border-width: round(up, var(--dsc-input-border-width), 0.0625rem);
  }

  &:not([data-size]) {
    font-size: inherit; /* Ensure inheriting font-size */
  }

  &:is(select) {
    padding-right: 2.4em;
    background: linear-gradient(45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4)) calc(100% - 1.2em + var(--dsc-input-stroke))
      / 0.4em 0.4em no-repeat, linear-gradient(-45deg, var(--diagonal-1), var(--diagonal-2), var(--diagonal-3), var(--diagonal-4)) calc(100% - 0.8em) / 0.4em
      0.4em no-repeat, var(--dsc-input-background);

    @media (forced-colors: active) {
      appearance: auto; /* show chevron */
    }
  }

  &:is(textarea) {
    height: auto; /* Allow rows="" to set height */
    min-height: calc(var(--dsc-input-size) * 1.5); /* Set a min-height to indicate this is a <textarea> and not an <input> */
    resize: vertical; /* Allow resizing vertically only */

    &:not([rows]) {
      field-sizing: content;
    }
  }

  /* Using select:where() to decrease specificity */
  &:not([size], [cols], select:where([data-width='auto'])) {
    width: 100%;
  }

  /**
   * States
   */
  &:checked,
  &:indeterminate:where([type='checkbox']) {
    --dsc-input-background: var(--dsc-input-background--checked);
    --dsc-input-border-color: var(--dsc-input-border-color--checked);
    --dsc-input-color: var(--dsc-input-color--checked);
  }

  &:disabled,
  &[aria-disabled='true'] {
    cursor: not-allowed;
    opacity: var(--ds-disabled-opacity);
  }

  &[aria-invalid='true'] {
    --dsc-input-background--checked: var(--dsc-input-background--invalid);
    --dsc-input-border-color: var(--dsc-input-border-color--invalid);
    --dsc-input-color--checked: var(--dsc-input-color--invalid);
  }

  /* Using attribute [readonly] since pseudo selector :read-only is always true for checkbox, radio and select */
  &[readonly] {
    --dsc-input-background: var(--dsc-input-background--readonly);
    --dsc-input-border-color: var(--dsc-input-border-color--readonly);
    --dsc-input-color: var(--dsc-input-color--readonly);

    @media (forced-colors: active) {
      --dsc-input-border-color: GrayText;
    }
  }

  /**
   * Toggle inputs and select
   */
  &:read-only:not([readonly], [aria-disabled='true'], :disabled) {
    cursor: pointer;
  }

  /**
   * Toggle inputs
   */
  &[type='checkbox'],
  &[type='radio'] {
    --dsc-input-border-width: var(--dsc-input-border-width--toggle);
    --dsc-input-padding: calc(var(--ds-size-1) / 2);
    --dsc-input-size: var(--dsc-input-size--toggle);

    flex-shrink: 0; /* Never shrink a toggle input */
    line-height: inherit; /* Inherit line height so we can use 1lh to align with first line of label */
    width: var(--dsc-input-size);
    /* forced-color-adjust: none; */ /* Prevent browser from applying forced colors, since we need the background */

    &:not([aria-label]) {
      translate: 0 calc((1lh - var(--dsc-input-size)) / 2); /* Align with first line of <label> text, but not if having aria-label as <label> */
    }

    @media (forced-colors: active) {
      &:disabled,
      &[aria-disabled='true'],
      &[readonly] {
        --dsc-input-border-color: GrayText;
      }
    }
  }

  &[type='radio'] {
    border-radius: var(--ds-border-radius-full);
  }

  &[type='radio']:checked {
    background: radial-gradient(circle closest-side, currentcolor 45%, transparent 50%), var(--dsc-input-background);

    @media (forced-colors: active) {
      --dsc-input-background: LinkText;
      --dsc-input-border-color: LinkText;

      background: radial-gradient(circle closest-side, Canvas 45%, transparent 50%), var(--dsc-input-background);
      forced-color-adjust: none; /* To be able to draw dot */
    }
  }

  &[type='checkbox']:checked {
    background: var(--check-left), var(--check-right), var(--dsc-input-background);

    @media (forced-colors: active) {
      --dsc-input-background: LinkText;
      --dsc-input-border-color: LinkText;

      background: var(--check-left), var(--check-right), var(--dsc-input-background);
      forced-color-adjust: none; /* To be able to draw check */
    }
  }

  &[type='checkbox']:indeterminate {
    background: center / contain no-repeat content-box
      linear-gradient(
        transparent calc(48% - var(--dsc-input-stroke)),
        currentcolor calc(50% - var(--dsc-input-stroke)),
        currentcolor calc(50% + var(--dsc-input-stroke)),
        transparent calc(52% + var(--dsc-input-stroke))
      ), var(--dsc-input-background);

    @media (forced-colors: active) {
      --dsc-input-background: LinkText;
      --dsc-input-border-color: LinkText;

      background: center / contain no-repeat content-box
        linear-gradient(
          transparent calc(48% - var(--dsc-input-stroke)),
          Canvas calc(50% - var(--dsc-input-stroke)),
          Canvas calc(50% + var(--dsc-input-stroke)),
          transparent calc(52% + var(--dsc-input-stroke))
        ), var(--dsc-input-background);

      forced-color-adjust: none; /* To be able to draw line */
    }
  }

  /**
   * Switch
   */
  &[role='switch']:is([type='radio'], [type='checkbox']) {
    --circle-position: left;

    border-radius: var(--ds-border-radius-full);
    transition: 0.2s background-position;
    width: calc(var(--dsc-input-size) * 2);
    background: radial-gradient(circle closest-side, currentcolor 95%, transparent 100%) var(--circle-position) / calc(50% - var(--dsc-input-padding) * 2) 100%
      no-repeat content-box, var(--dsc-input-background);

    &:checked {
      --circle-position: right;
    }

    @media (forced-colors: active) {
      forced-color-adjust: none; /* To be able to draw switch */

      &:disabled,
      &[aria-disabled='true'],
      &[readonly] {
        --dsc-input-border-color: GrayText;
      }
    }
  }
}
